# unixutil.lib

# Universal methods and variables

FRC_YEAR=$(date '+%j')
WPILIB_VERSION=$(curl https://github.com/wpilibsuite/allwpilib/releases/latest | cut -c90-98)

VSCODE_WGET_LINK="https://go.microsoft.com/fwlink/?LinkID=620882"
VSCODE_WGET_ZIP_FILE="index.html?LinkID=620882"
VSCODE_INSTALL_PATH="$HOME/Applications"

WPILIB_WGET_LINK="https://github.com/wpilibsuite/allwpilib/releases/download/v"$WPILIB_VERSION"/WPILib_Mac-"$WPILIB_VERSION".tar.gz"
WPILIB_WGET_ZIP_FILE="WPILib_Mac-"$WPILIB_VERSION".tar.gz"
WPILIB_INSTALL_PATH="$HOME/frc$FRC_YEAR"

NAVX_WGET_LINK="http://www.kauailabs.com/public_files/navx-mxp/navx-mxp-libs.zip"
NAVX_WGET_ZIP_FILE="navx-mxp-libs.zip"
NAVX_INSTALL_PATH="$WPILIB_INSTALL_PATH/NavX"

CTRE_WGET_LINK="http://www.ctr-electronics.com//downloads/lib/CTRE_FRCLibs_NON-WINDOWS_v4.4.1.10.zip"
# Next line gets the latest version of CTRE
# First, uses curl to downloads webpage containing links to all the downloads of ctre, then uses tail -1 to get the bottomost one, or the latest one. The result looks something like this: `<li><a href="CTRE_FRCLibs_NON-WINDOWS_v5.0.3.3.zip"> CTRE_FRCLibs_NON-WINDOWS_v5.0.3.3.zip</a></li>` so, you need to split by quotes, and get -f2 to get only the CTRE_FRCLibs_NON-Windows_v5.0.3.3.zip portion
CTRE_WGET_ZIP_FILE=$(curl http://www.ctr-electronics.com//downloads/lib/ | grep CTRE_FRCLibs | tail -1 | cut -d'"' -f2)
CTRE_INSTALL_PATH="$WPILIB_INSTALL_PATH/CTRE"

JAVA_HOME="$HOME/frc$FRC_YEAR/jdk"

vscodeExtensionInstallation()
{
    cd $WPILIB_INSTALL_PATH/vsCodeExtensions
    code Cpp.vsix
    code JavaLang.vsix
    code JavaDeps.vsix
    code JavaDebug.vsix
    code WPILib.vsix
    code --install-extension redhat.java
    code --install-extension EditorConfig.EditorConfig
}

setEnvironmentVariables()
{
    echo 'export JAVA_HOME=$JAVA_HOME
export PATH="$PATH:$JAVA_HOME/bin"
export FRC_HOME=$WPILIB_INSTALL_PATH' >> ~/.profile
    echo 'export JAVA_HOME=$JAVA_HOME
export PATH="$PATH:$JAVA_HOME/bin"
export FRC_HOME=$WPILIB_INSTALL_PATH' >> ~/.bashrc
}

toolsUpdater()
{
    cd $WPILIB_INSTALL_PATH/tools
    python ToolsUpdater.py
}

wpilibInstallation()
{
    wget $WPILIB_WGET_LINK
    mkdir -p $WPILIB_INSTALL_PATH
    tar xvzf $WPILIB_WGET_ZIP_FILE -C $WPILIB_INSTALL_PATH
    rm -f $WPILIB_WGET_ZIP_FILE
}

navxInstallation()
{
    wget $NAVX_WGET_LINK
    mkdir -p $NAVX_INSTALL_PATH
    unzip $NAVX_WGET_ZIP_FILE -d $NAVX_INSTALL_PATH
    rm -f $NAVX_WGET_ZIP_FILE
}


ctreInstallation()
{
    wget $CTRE_WGET_LINK
    mkdir -p $CTRE_INSTALL_PATH
    unzip $CTRE_WGET_ZIP_FILE -d $CTRE_INSTALL_PATH
    rm -f $CTRE_WGET_ZIP_FILE
}

# macOS only methods

# Install homebrew, and use homebrew to install git and wget
homebrewInstallation()
{
    echo "Checking if homebrew exists"
    if [ ! isDependencyInPATH brew ]; then
        echo 'Installing homebrew'
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    echo "Installing git and wget using brew"
    brew install git wget
}

# This method checks to see if the dependency already exists in PATH
isDependencyInPATH()
{
    # python getPATH.py prints out array for all folders in PATH
    [ ! -z "$(for i in $(python getPATH.py)
    do
        ls $i
    done | grep -sw $1)" ]
}

vscodeCaskInstallation()
{
    brew cask install visual-studio-code
}

# Linux Only Methods

vscodeSnapInstallation()
{
    if [ ! isDependencyInPATH snap ]; then
        echo 'Please install the snap dependency here: https://snapcraft.io/docs/installing-snapd'
        echo 'A snap automatically installs the app + dependencies'
        echo "They're designed to work regardless of the linux distribution"
    else
        snap install code --classic
    fi
}
