# unixutil.lib

# Universal methods and variables

FRC_YEAR=(cut -d' ' -f4 <<< $now) # Gets the current year
WPILIB_VERSION=$(curl https://github.com/wpilibsuite/allwpilib/releases/latest | cut -c90-98)

VSCODE_WGET_LINK="https://go.microsoft.com/fwlink/?LinkID=620882"
VSCODE_WGET_ZIP_FILE="index.html?LinkID=620882"
VSCODE_INSTALL_PATH="$HOME/Applications"

WPILIB_WGET_LINK="https://github.com/wpilibsuite/allwpilib/releases/download/v"$WPILIB_VERSION"/WPILib_Mac-"$WPILIB_VERSION".tar.gz"
WPILIB_WGET_ZIP_FILE="WPILib_Mac-"$WPILIB_VERSION".tar.gz"
WPILIB_INSTALL_PATH="$HOME/frc$FRC_YEAR"

NAVX_WGET_LINK="http://www.kauailabs.com/public_files/navx-mxp/navx-mxp-libs.zip"
NAVX_WGET_ZIP_FILE="navx-mxp-libs.zip"
NAVX_INSTALL_PATH="$WPILIB_INSTALL_PATH/NavX"

CTRE_WGET_LINK="http://www.ctr-electronics.com//downloads/lib/CTRE_FRCLibs_NON-WINDOWS_v4.4.1.10.zip"
# Next line gets the latest version of CTRE
# First, uses curl to downloads webpage containing links to all the downloads of ctre, then uses tail -1 to get the bottomost one, or the latest one. The result looks something like this: `<li><a href="CTRE_FRCLibs_NON-WINDOWS_v5.0.3.3.zip"> CTRE_FRCLibs_NON-WINDOWS_v5.0.3.3.zip</a></li>` so, you need to split by quotes, and get -f2 to get only the CTRE_FRCLibs_NON-Windows_v5.0.3.3.zip portion
CTRE_WGET_ZIP_FILE=$(curl http://www.ctr-electronics.com//downloads/lib/ | grep CTRE_FRCLibs | tail -1 | cut -d'"' -f2)
CTRE_INSTALL_PATH="$WPILIB_INSTALL_PATH/CTRE"

JAVA_HOME="$HOME/frc$FRC_YEAR/jdk"

vscodeExtensionInstallation()
{
    case $1 in
        macOS)
            cat <<EOF >> ~/.profile
                export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Reources/app/bin"
            EOF
            ;;
  cd $WPILIB_INSTALL_PATH/vsCodeExtensions
  code --install-extension Cpp.vsix
  code --install-extension JavaLang.vsix
  code --install-extension JavaDeps.vsix
  code --install-extension JavaDebug.vsix
  code --install-extension WPILib.vsix
}

setEnvironmentVariables
{
    cat <<EOF>> ~/.profile
        export JAVA_HOME="~/frc2019/jdk"
        export PATH="\$PATH:$JAVA_HOME/bin
# Add gradle home here after you figure it out
}

toolsUpdater()
{
    cd ~/frc2019/tools
    python3 ToolsUpdater.py
}

navxInstallation()
{
    wget $NAVX_WGET_LINK
    mkdir -p $NAVX_INSTALL_PATH
    unzip $NAVX_WGET_ZIP_FILE -d $NAVX_INSTALL_PATH
    rm -f $NAVX_WGET_ZIP_FILE
}


ctreInstallation()
{
    wget $CTRE_WGET_LINK
    mkdir -p $CTRE_INSTALL_PATH
    unzip $CTRE_WGET_ZIP_FILE -d $CTRE_INSTALL_PATH
    rm -f $CTRE_WGET_ZIP_FILE
}    

# macOS only methods

homebrewInstallation()
{
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

vscodeLinkInstallation()
{
    wget -c $VSCODE_WGET_LINK
    unzip $VSCODE_WGET_ZIP_FILE -d $VSCODE_INSTALL_PATH
    rm -f $VSCODE_WGET_ZIP_FILE
}

yarnInstallation()
{
    # install nvm in order to get a new enough version of node.js
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    nvm install 10
    case $1 in
        macOS)
            brew install yarn
            ;;
        arch)
            sudo pacman -S yarn
            ;;
        ubuntu)
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update && sudo apt-get install yarn
}

# Unix Only Methods

vscodeSnapInstallation()
{
    snapInstallation
    snap install code --classic
    vscodeExtensionInstallation
}
